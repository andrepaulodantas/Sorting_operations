version: "3.8"

services:
  # MongoDB para armazenamento de dados
  mongodb:
    image: mongo:4.4
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
      - MONGO_INITDB_DATABASE=productdb
    networks:
      - app-network

  # RabbitMQ para mensageria
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # AMQP protocol port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - app-network

  # Backend - API de produtos e chat
  product-api:
    build:
      context: ./product-api
      dockerfile: Dockerfile
    container_name: product-api
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_MONGODB_URI=mongodb://root:example@mongodb:27017/productdb?authSource=admin
      - SPRING_GRAPHQL_SCHEMA_INSPECTION_ENABLED=false
      - SPRING_MAIN_WEB_APPLICATION_TYPE=servlet
      - SPRING_DATA_MONGODB_REPOSITORIES_TYPE=none
      - SPRING_DATA_MONGODB_AUTO_INDEX_CREATION=false
    depends_on:
      - mongodb
    networks:
      - app-network

  # Frontend - UI da aplicação
  product-ui:
    build:
      context: ./product-ui
      dockerfile: Dockerfile
    container_name: product-ui
    ports:
      - "80:80"
    environment:
      - API_URL=http://product-api:8080
    depends_on:
      - product-api
    networks:
      - app-network

volumes:
  mongodb_data:
  rabbitmq_data:

networks:
  app-network:
